{
  "name": "disable-copilot-comment-completions",
  "displayName": "Disable Copilot Completions in Scopes",
  "description": "Prevents GitHub Copilot from providing Inline Suggestions when user-defined criteria is met",
  "icon": "media/icon.png",
  "version": "2.0.0",
  "engines": {
    "vscode": "^1.77.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/entry.js",
  "contributes": {
    "commands": [
      {
        "command": "disable-copilot-comment-completions.enable",
        "title": "Enable Copilot Scope Inhibitor",
        "category": "Inhibit Comments",
        "shortTitle": "Enable Inhibitor"
      },
      {
        "command": "disable-copilot-comment-completions.disable",
        "title": "Disable Copilot Scope Inhibitor",
        "category": "Inhibit Comments",
        "shortTitle": "Disable Inhibitor"
      },
      {
        "command": "disable-copilot-comment-completions.toggle",
        "title": "Toggle Copilot Scope Inhibitor",
        "category": "Inhibit Comments",
        "shortTitle": "Toggle Inhibitor"
      },
      {
        "command": "disable-copilot-comment-completions.addScopes",
        "title": "Add Scopes to Inhibit from Cursor",
        "category": "Inhibit Comments",
        "shortTitle": "Add Scopes",
        "enablement": "editorIsOpen"
      }
    ],
    "configuration": {
      "title": "Copilot Comments",
      "properties": {
        "disable-copilot-comment-completions.active": {
          "default": true,
          "description": "Whether or not you want the Extension to be enabled. You can also just uninstall the extension, but hey, whatever\nfloats your boat boss.",
          "type": "boolean"
        },
        "disable-copilot-comment-completions.contentRules": {
          "description": "An (optional) array of Rules to apply against the content of the document itself, based around the cursor's position.",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  {
                    "description": "An exclusion rule that uses basic string comparison functions (includes,\nstartsWith, endsWith, equals) to evaluate against a given string.",
                    "properties": {
                      "mode": {
                        "default": "includes",
                        "description": "Optional preference of how to compare the rule's `value` property to the thing being compared.\nIf omitted, defaults to `includes`.",
                        "enum": [
                          "endsWith",
                          "equals",
                          "includes",
                          "startsWith"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "string"
                        ],
                        "type": "string"
                      },
                      "value": {
                        "description": "The value to compare against the operand that is being evaluated against this rule.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "value"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "expandRangeByLines": {
                        "description": "Optional. If specified, this number will be applied as an offset to the line number at the caret\nposition, expanding the range whose text content will be tested against the rule specified in `value`\nto have a start line of `<currentLine> - <expandRangeByLines>` and an end line of\n`<currentLine> + <expandRangeByLines>`.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "description": "An exclusion rule that uses a regular expression to evaluate against a given string.",
                    "properties": {
                      "type": {
                        "enum": [
                          "regexp"
                        ],
                        "type": "string"
                      },
                      "value": {
                        "description": "The values to pass to the `RegExp` constructor function, e.g: `new RegExp(value.source, value?.flags)`",
                        "properties": {
                          "flags": {
                            "description": "Optional RegExp flags (gimsuy) to use as the second argument passed to the `RegExp` constructor function.",
                            "type": "string"
                          },
                          "source": {
                            "description": "The source string to use as the first argument passed to the `RegExp` constructor function.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "source"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "type",
                      "value"
                    ],
                    "type": "object"
                  },
                  {
                    "properties": {
                      "expandRangeByLines": {
                        "description": "Optional. If specified, this number will be applied as an offset to the line number at the caret\nposition, expanding the range whose text content will be tested against the rule specified in `value`\nto have a start line of `<currentLine> - <expandRangeByLines>` and an end line of\n`<currentLine> + <expandRangeByLines>`.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            ],
            "description": "A rule that is applied against the content of the document itself, based around the cursor's\nposition in the document, as opposed to being applied against the TextMate Scopes at the cursor's\nposition."
          },
          "type": "array"
        },
        "disable-copilot-comment-completions.debug": {
          "description": "When set to true, the Extension will create an Output Channel and log information about what it's doing.",
          "type": "boolean",
          "default": false
        },
        "disable-copilot-comment-completions.eventProcessingThrottleDelayMs": {
          "default": 500,
          "description": "This extension performs relatively expensive computations when processing the\n[onDidChangeTextEditorSelection](https://code.visualstudio.com/api/references/vscode-api#:~:text=onDidChangeTextEditorSelection%3A%20Event%3CTextEditorSelectionChangeEvent%3E) event.\n\nThis setting allows you to throttle the rate at which these computations are performed. The default value of\n`500` means that the computations will be performed at most once every 500ms. Set this to `0` to disable throttling.\n\nIf throttling is disabled, you may find that this Extension slows VSCode down during certain operations, especially\ninside of large files (as this Extension has to tokenize the file when it is changed, a bigger file means more\nprocessing to figure out what scopes are at the current Caret position).",
          "type": "number"
        },
        "disable-copilot-comment-completions.globPatterns": {
          "description": "An (optional) array of glob patterns to match against the path of active file. If any of the globs\ndefined here matches the active file, Inline Suggestions will be inhibited.\n\nUses [multimatch](https://www.npmjs.com/package/multimatch) under the hood, so any valid multimatch\npattern will work here.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "default": []
        },
        "disable-copilot-comment-completions.textMateRules": {
          "default": [
            {
              "mode": "includes",
              "type": "string",
              "value": "comment"
            }
          ],
          "description": "An array of rules to apply against the TextMate Scopes at the cursor position. If any rule matches,\nCopilot's inline suggestions will be toggled off.",
          "items": {
            "anyOf": [
              {
                "description": "An exclusion rule that uses basic string comparison functions (includes,\nstartsWith, endsWith, equals) to evaluate against a given string.",
                "properties": {
                  "mode": {
                    "default": "includes",
                    "description": "Optional preference of how to compare the rule's `value` property to the thing being compared.\nIf omitted, defaults to `includes`.",
                    "enum": [
                      "endsWith",
                      "equals",
                      "includes",
                      "startsWith"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "string"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "description": "The value to compare against the operand that is being evaluated against this rule.",
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "value"
                ],
                "type": "object"
              },
              {
                "description": "An exclusion rule that uses a regular expression to evaluate against a given string.",
                "properties": {
                  "type": {
                    "enum": [
                      "regexp"
                    ],
                    "type": "string"
                  },
                  "value": {
                    "description": "The values to pass to the `RegExp` constructor function, e.g: `new RegExp(value.source, value?.flags)`",
                    "properties": {
                      "flags": {
                        "description": "Optional RegExp flags (gimsuy) to use as the second argument passed to the `RegExp` constructor function.",
                        "type": "string"
                      },
                      "source": {
                        "description": "The source string to use as the first argument passed to the `RegExp` constructor function.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "source"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "type",
                  "value"
                ],
                "type": "object"
              }
            ]
          },
          "type": "array"
        },
        "disable-copilot-comment-completions.configurationTarget": {
          "default": "includes",
          "enum": [
            "Global",
            "Workspace",
            "WorkspaceFolder"
          ],
          "description": "Specifies where to save the changes to the `github.copilot.editor.enableAutoCompletions` setting to. By default, VSCode will save the settings to the `WorkspaceFolder` settings if the configuration is resource-specific, otherwise it will write to the `Workspace` settings. If you want the extension to write it's changes to the global/user `settings.json` file, you should specify `Global` here. By omiting this setting, you leave the choice up to VSCode, which will result in the setting being wrote to your workspaces' settings.",
          "type": "string"
        }
      }
    }
  },
  "scripts": {
    "test-compile": "tsc -p ./",
    "compile": "tsc -p ./",
    "esbuild": "rimraf ./out && npm run esbuild-base -- --sourcemap",
    "esbuild-base": "esbuild ./src/entry.ts --bundle --outfile=out/entry.js --external:vscode --format=cjs --platform=node --log-level=info",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "esbuild-dev": "rimraf ./out && npm run esbuild-base -- --sourcemap",
    "vscode:prepublish": "rimraf ./out && npm run esbuild-base -- --minify",
    "watch": "tsc -watch -p ./",
    "generate-schema": "typescript-json-schema ./src/configuration.ts TConfiguration --refs false --aliasRefs false --topRef false --required true --strictNullChecks true --out ./configuration-json-schema.json",
    "generate-vscode-types": "typed-vscode generate --out src/generated.ts",
    "package": "vsce package --out ./packages"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@total-typescript/ts-reset": "^0.6.1",
    "@types/lodash.throttle": "^4.1.9",
    "@types/node": "^22.13.10",
    "@types/vscode": "^1.77.0",
    "@typescript-eslint/eslint-plugin": "^5.57.1",
    "@typescript-eslint/parser": "^5.57.1",
    "esbuild": "^0.25.1",
    "eslint": "^8.37.0",
    "eslint-config-prettier": "^8.8.0",
    "prettier": "^3.5.3",
    "prettier-eslint": "^16.3.0",
    "prettier-plugin-jsdoc": "^1.3.2",
    "rimraf": "^6.0.1",
    "ts-json-schema-generator": "^2.3.0",
    "ts-loader": "^9.5.2",
    "tslib": "^2.8.1",
    "type-fest": "^4.37.0",
    "typed-vscode": "^0.0.5",
    "typescript": "^5.8.2",
    "typescript-json-schema": "^0.65.1"
  },
  "extensionDependencies": [
    "draivin.hscopes"
  ],
  "repository": {
    "url": "https://github.com/jamesonknutson/disable-copilot-comment-completions"
  },
  "publisher": "disable-copilot-comment-completions",
  "dependencies": {
    "lodash.throttle": "^4.1.1",
    "multimatch": "^5.0.0"
  }
}
